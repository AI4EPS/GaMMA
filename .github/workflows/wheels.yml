# Workflow to build and test wheels
name: Wheel builder

on:

  push:
    branches:
      - master
      # Release branches
      - "[0-9]+.[0-9]+.X"
  pull_request:
    branches:
      - master
      - "[0-9]+.[0-9]+.X"
  # Manual run
  workflow_dispatch:

jobs:
  # Check whether to build the wheels and the source tarball
  check_build_trigger:
    name: Check build trigger
    runs-on: ubuntu-latest
    if: github.repository == 'wayneweiqiang/GMMA'
    outputs:
      build: ${{ steps.check_build_trigger.outputs.build }}

    steps:
      - name: Checkout GMMA
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: check_build_trigger
        name: Check build trigger
        run: bash build_tools/github/check_build_trigger.sh

  # Build the wheels for Linux, Windows and macOS for Python 3.6 and newer
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [37]
        bitness: [64]
        # manylinux_image: [manylinux1, manylinux2010]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        # exclude:
        #   - os: macos-latest
        #     bitness: 32
        #   # Remove manylinux1 from the windows and osx build matrix since
        #   # manylinux_image is not used for these platforms
        #   - os: macos-latest
        #     manylinux_image: manylinux1

    steps:
      - name: Checkout GMMA
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build and test wheels
        env:
          CONFTEST_PATH: ${{ github.workspace }}/conftest.py
          CONFTEST_NAME: conftest.py
          CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
                            OPENBLAS_NUM_THREADS=2
                            SKLEARN_SKIP_NETWORK_TESTS=1
                            SKLEARN_BUILD_PARALLEL=3
                            MACOSX_DEPLOYMENT_TARGET=10.13
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_TEST_REQUIRES: pytest pandas threadpoolctl
          CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh

        run: bash build_tools/github/build_wheels.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build

    steps:
      - name: Checkout GMMA
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build source distribution
        run: bash build_tools/github/build_source.sh
        env:
          SKLEARN_BUILD_PARALLEL: 3

      - name: Test source distribution
        run: bash build_tools/github/test_source.sh
        env:
          OMP_NUM_THREADS: 2
          OPENBLAS_NUM_THREADS: 2
          SKLEARN_SKIP_NETWORK_TESTS: 1

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  # Upload the wheels and the source distribution
  upload_anaconda:
    name: Upload to Anaconda
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    # The artifacts cannot be uploaded on PRs
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout GMMA
        uses: actions/checkout@v1

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Upload artifacts
        env:
          # Secret variables need to be mapped to environment variables explicitly
          ANACONDA_UPLOAD_TOKEN: ${{ secrets.ANACONDA_UPLOAD_TOKEN }}
        # Force a replacement if the remote file already exists
        run: bash build_tools/github/upload_anaconda.sh
